# backend/app.py
from flask import Flask, jsonify, request, session
from flask_cors import CORS
import json
import os

app = Flask(__name__)
CORS(app, supports_credentials=True)
app.secret_key = 'your_secret_key_here'

USERS_FILE = 'backend/data/users.json'
LOANS_FILE = 'backend/data/loans.json'

# ------------------ Helpers ------------------ #
def load_data(file_path):
    if not os.path.exists(file_path):
        return []
    with open(file_path, 'r') as file:
        return json.load(file)

def save_data(file_path, data):
    with open(file_path, 'w') as file:
        json.dump(data, file, indent=4)

# ------------------ Auth ------------------ #
@app.route('/api/login', methods=['POST'])
def login():
    users = load_data(USERS_FILE)
    data = request.json
    email = data.get('email')
    password = data.get('password')

    for user in users:
        if user['email'] == email and user['password'] == password:
            session['email'] = email
            session['role'] = user['role']
            session['customer_id'] = user.get('customer_id')
            return jsonify({"message": "Login successful", "role": user['role']})

    return jsonify({"message": "Invalid credentials"}), 401

@app.route('/api/logout', methods=['POST'])
def logout():
    session.clear()
    return jsonify({"message": "Logged out"})

# ------------------ Loans (CRUD) ------------------ #
@app.route('/api/loans', methods=['GET'])
def get_loans():
    if 'role' not in session:
        return jsonify({"message": "Unauthorized"}), 403

    loans = load_data(LOANS_FILE)
    if session['role'] == 'admin':
        return jsonify(loans)
    elif session['role'] == 'customer':
        user_loans = [l for l in loans if l['customer_id'] == session['customer_id']]
        return jsonify(user_loans)

@app.route('/api/loans', methods=['POST'])
def add_loan():
    if session.get('role') != 'admin':
        return jsonify({"message": "Unauthorized"}), 403

    loan = request.json
    loans = load_data(LOANS_FILE)
    loans.append(loan)
    save_data(LOANS_FILE, loans)
    return jsonify({"message": "Loan added successfully"})

@app.route('/api/loans/<loan_id>', methods=['PUT'])
def update_loan(loan_id):
    if session.get('role') != 'admin':
        return jsonify({"message": "Unauthorized"}), 403

    updated = request.json
    loans = load_data(LOANS_FILE)
    for i, loan in enumerate(loans):
        if loan['loan_id'] == loan_id:
            loans[i] = updated
            save_data(LOANS_FILE, loans)
            return jsonify({"message": "Loan updated successfully"})

    return jsonify({"message": "Loan not found"}), 404

@app.route('/api/loans/<loan_id>', methods=['DELETE'])
def delete_loan(loan_id):
    if session.get('role') != 'admin':
        return jsonify({"message": "Unauthorized"}), 403

    loans = load_data(LOANS_FILE)
    loans = [loan for loan in loans if loan['loan_id'] != loan_id]
    save_data(LOANS_FILE, loans)
    return jsonify({"message": "Loan deleted successfully"})

# ------------------ Run ------------------ #
if __name__ == '__main__':
    app.run(debug=True)
